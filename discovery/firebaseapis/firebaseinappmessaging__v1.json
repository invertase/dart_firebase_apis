{
    "basePath": "",
    "baseUrl": "https://firebaseinappmessaging.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Firebase In-App Messaging API",
    "description": "Publicly accessible APIs that allows firebase in-app messaging SDKs/Clients to communicate with servers for fetching message definitions. ",
    "discoveryVersion": "v1",
    "documentationLink": "https://firebase.google.com",
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "firebaseinappmessaging:v1",
    "kind": "discovery#restDescription",
    "name": "firebaseinappmessaging",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "$.xgafv": {
            "description": "V1 error format.",
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "description": "OAuth access token.",
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "description": "Data format for response.",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "description": "JSONP",
            "location": "query",
            "type": "string"
        },
        "fields": {
            "description": "Selector specifying which fields to include in a partial response.",
            "location": "query",
            "type": "string"
        },
        "key": {
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "description": "OAuth 2.0 token for the current user.",
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "description": "Returns response with indentations and line breaks.",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "sdkServing": {
            "resources": {
                "projects": {
                    "resources": {
                        "eligibleCampaigns": {
                            "methods": {
                                "fetch": {
                                    "description": "Retrieve fiam messages that are suitable for the current client app instance. A suitable campaign message needs to satisfy 3 conditions 1 Active campaign 2 The requesting client app instance meets the targeting requirement for the campaign 3 The message is still yet to be rendered by the requesting client app instance based on the display policy for the campaign. Parameter already_seen_campaign in the request object is used to help serve this purpose. Due to potential risk of a long list of already_seen_campaigns causing the url to reach the length limit, it's modeled as a POST request (so we can use body to carry the request data) with custom method even though it's essentially a read operation. The returned list of campaign messages are sorted from high priority to low priority so that the client can display them in the order as seen in the response.",
                                    "flatPath": "v1/sdkServing/projects/{projectNumber}/eligibleCampaigns:fetch",
                                    "httpMethod": "POST",
                                    "id": "firebaseinappmessaging.sdkServing.projects.eligibleCampaigns.fetch",
                                    "parameterOrder": [
                                        "projectNumber"
                                    ],
                                    "parameters": {
                                        "projectNumber": {
                                            "description": "[required] the unique numeric string identifying the firebase project that the client app belongs",
                                            "location": "path",
                                            "required": true,
                                            "type": "string"
                                        }
                                    },
                                    "path": "v1/sdkServing/projects/{projectNumber}/eligibleCampaigns:fetch",
                                    "request": {
                                        "$ref": "FetchEligibleCampaignsRequest"
                                    },
                                    "response": {
                                        "$ref": "FetchEligibleCampaignsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "revision": "20220502",
    "rootUrl": "https://firebaseinappmessaging.googleapis.com/",
    "schemas": {
        "Action": {
            "description": "This defines the action to be taken on click: For now, only the url to navigate to.",
            "id": "Action",
            "properties": {
                "actionUrl": {
                    "description": "Action url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BannerMessage": {
            "id": "BannerMessage",
            "properties": {
                "action": {
                    "$ref": "Action",
                    "description": "[optional] Action to take when banner is clicked"
                },
                "backgroundHexColor": {
                    "description": "[optional] Message background color.",
                    "type": "string"
                },
                "body": {
                    "$ref": "Text",
                    "description": "[optional] Message body."
                },
                "imageUrl": {
                    "description": "[optional] Image to display (https url - it will be downloaded onto the device) No prefix required.",
                    "type": "string"
                },
                "title": {
                    "$ref": "Text",
                    "description": "[required] Message title."
                }
            },
            "type": "object"
        },
        "Button": {
            "id": "Button",
            "properties": {
                "buttonHexColor": {
                    "description": "Button background color.",
                    "type": "string"
                },
                "text": {
                    "$ref": "Text",
                    "description": "Button text."
                }
            },
            "type": "object"
        },
        "CampaignImpression": {
            "description": "A campaign id and timestamp noting when the device displayed this campaign",
            "id": "CampaignImpression",
            "properties": {
                "campaignId": {
                    "description": "[required] campaign_id",
                    "type": "string"
                },
                "impressionTimestampMillis": {
                    "description": "[required] when instance last displayed the content for this campaign",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CardMessage": {
            "id": "CardMessage",
            "properties": {
                "backgroundHexColor": {
                    "description": "[required] Message background color.",
                    "type": "string"
                },
                "body": {
                    "$ref": "Text",
                    "description": "[optional] Message body."
                },
                "landscapeImageUrl": {
                    "description": "[optional] HTTPS url of the image to display in landscape orientation of the device. If missing, the client will default to using the portrait image url.",
                    "type": "string"
                },
                "portraitImageUrl": {
                    "description": "[required] HTTPS url of the image to display in portrait orientation of the device.",
                    "type": "string"
                },
                "primaryAction": {
                    "$ref": "Action",
                    "description": "[optional] The action to take when clicking on the primary button."
                },
                "primaryActionButton": {
                    "$ref": "Button",
                    "description": "[required] Message button. Clicking this button will trigger the modal's primary action If the primary action is not provided, the button simply dismisses the message."
                },
                "secondaryAction": {
                    "$ref": "Action",
                    "description": "[optional] The action to take when the secondary action button is clicked."
                },
                "secondaryActionButton": {
                    "$ref": "Button",
                    "description": "[optional] Message button. Clicking this button will trigger the modal's secondary action If the secondary action is not provided, the button simply dismisses the message."
                },
                "title": {
                    "$ref": "Text",
                    "description": "[required] Message title."
                }
            },
            "type": "object"
        },
        "ClientAppInfo": {
            "description": "it has the info in identifying the client app making the request",
            "id": "ClientAppInfo",
            "properties": {
                "appInstanceId": {
                    "description": "[required] app instance id",
                    "type": "string"
                },
                "appInstanceIdToken": {
                    "description": "[required] app instance id token",
                    "type": "string"
                },
                "gmpAppId": {
                    "description": "[required] the unique app id for the client app",
                    "type": "string"
                },
                "sdkVersion": {
                    "description": "[optional] SDK version from which the request is being made in the format: : e.g ios:3.14 or android:13.37",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientSignals": {
            "description": "A set of signals which are collected on the client and are included in requests by Firebase Services (eg. Remote Config, Digital Goods etc). NOTE: These will eventually not be needed in the request when we have an App Checkin service which will upload these signals periodically.",
            "id": "ClientSignals",
            "properties": {
                "appVersion": {
                    "description": "Optional. The App version. Android - versionName - http://shortn/_SXW3Wxg972 iOS - CFBundleVersion - http://shortn/_Z1l0Lv8Kq6",
                    "type": "string"
                },
                "languageCode": {
                    "description": "Optional. Device language in the BCP47 format. For example \"en-US\". This is case-insensitive. Android - Locale.getDefault() iOS - ",
                    "type": "string"
                },
                "platformVersion": {
                    "description": "Optional. The Platform Version of the device. Android - The API level. http://shortn/_3fAA60nsoy iOS - A version of the format \"X.Y.Z\". http://shortn/_lY40KS4SNt NOTE(tal): as of Jan 2018 this signal is not used in common targeting.",
                    "type": "string"
                },
                "timeZone": {
                    "description": "Optional. Time zone in Olson ID format (eg: \"America/Los_Angeles\"). Case-sensitive. Android - TimeZone.getDefault().getID() - http://shortn/_euxZnYYP1G. iOS - NSTimeZone.name - http://shortn/_mTknrZvUIT",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Content": {
            "description": "Content of a Firebase in-app message.",
            "id": "Content",
            "properties": {
                "banner": {
                    "$ref": "BannerMessage",
                    "description": "Banner mode"
                },
                "card": {
                    "$ref": "CardMessage",
                    "description": "Card mode"
                },
                "imageOnly": {
                    "$ref": "ImageOnlyMessage",
                    "description": "Entire message is provided by the developer as an image"
                },
                "modal": {
                    "$ref": "ModalMessage",
                    "description": "Modal mode"
                }
            },
            "type": "object"
        },
        "Event": {
            "description": "Information about activity on the app. Can be automatically generated by client SDKs or provided directly by the app developer. Next ID to use: 6",
            "id": "Event",
            "properties": {
                "count": {
                    "description": "Events without timestamps will be grouped together by set of params and will be reported with occurrence count. This is lossless client side aggregation to pack the data in more compact form. Events with different set of params will be logged with different EventParam message.",
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "description": "The event name. Event name length will be limited to something short like 24 or 32 chars. The exact max length limit is TBD.",
                    "type": "string"
                },
                "params": {
                    "items": {
                        "$ref": "EventParam"
                    },
                    "type": "array"
                },
                "previousTimestampMillis": {
                    "description": "UTC client time when the transaction happened in millis.",
                    "format": "int64",
                    "type": "string"
                },
                "timestampMillis": {
                    "description": "UTC client time when the transaction happened in millis.",
                    "format": "int64",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EventParam": {
            "description": "Additional information about an Event. Can be automatically generated by client SDKs or provided directly by the developer. Next ID to use: 7",
            "id": "EventParam",
            "properties": {
                "doubleValue": {
                    "format": "double",
                    "type": "number"
                },
                "floatValue": {
                    "format": "float",
                    "type": "number"
                },
                "intValue": {
                    "format": "int64",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the event param. The max size of the event name is TBD but it will be constrained to 24 or 32 chars.",
                    "type": "string"
                },
                "paramValue": {
                    "description": "List of EventParams. No additional nesting/recursion is allowed.",
                    "items": {
                        "$ref": "EventParam"
                    },
                    "type": "array"
                },
                "stringValue": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExperimentLite": {
            "description": "A lighter version of ExperimentPayload that describes an experiment by only its experimentId. To be used when we don't need to know all the details about the experiment, such as when sending a list of all ongoing experiments.",
            "id": "ExperimentLite",
            "properties": {
                "experimentId": {
                    "description": "A string of max length 22 characters. Format: _exp_ Required field.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExperimentPayload": {
            "description": "ABT Payload for Firebase Namespace.",
            "id": "ExperimentPayload",
            "properties": {
                "activateEventToLog": {
                    "description": "The event logged when an experiment goes to the ON state. Max length = 32 chars",
                    "type": "string"
                },
                "clearEventToLog": {
                    "description": "The event logged when an experiment is cleared. Max length = 32 chars",
                    "type": "string"
                },
                "experimentId": {
                    "description": "A string of max length 22 characters. Format: _exp_ This is referred to as the tracking id and is different from the experiment id which is used internally by ABT. Required field.",
                    "type": "string"
                },
                "experimentStartTimeMillis": {
                    "description": "Epoch time in milliseconds when the experiment was started; > 0. Required field.",
                    "format": "int64",
                    "type": "string"
                },
                "ongoingExperiments": {
                    "description": "A list of all other ongoing (started, and not yet stopped) experiments at the time this experiment was started. Does not include this experiment; only the others.",
                    "items": {
                        "$ref": "ExperimentLite"
                    },
                    "type": "array"
                },
                "overflowPolicy": {
                    "description": "The overflow policy enum for this experiment payload.",
                    "enum": [
                        "POLICY_UNSPECIFIED",
                        "DISCARD_OLDEST",
                        "IGNORE_NEWEST"
                    ],
                    "enumDescriptions": [
                        "See go/protosdosdonts.",
                        "Discard oldest experiments (by experiment_start_time) first.",
                        "Ignore newest experiments first."
                    ],
                    "type": "string"
                },
                "setEventToLog": {
                    "description": "The event logged when impact service sets the experiment. Max length = 32 chars",
                    "type": "string"
                },
                "timeToLiveMillis": {
                    "description": "Duration in milliseconds that the experiment can stay in ON state (an experiment becomes ON when it has been triggered, or when it has no trigger event). Corresponds to the attribution time in the ABT UI. Valid range is from 1ms to 6 months (current max defined by Scion). If the value is outside this range the setExperiment call on the client will fail. Required field",
                    "format": "int64",
                    "type": "string"
                },
                "timeoutEventToLog": {
                    "description": "The event logged when an experiment times out after trigger_timeout_millis milliseconds. Max length = 32 chars",
                    "type": "string"
                },
                "triggerEvent": {
                    "description": "The Scion event that causes the experiment to transition to ON state.",
                    "type": "string"
                },
                "triggerTimeoutMillis": {
                    "description": "Duration in milliseconds that the experiment can stay in STANDBY state. Valid range is from 1ms to 6 months (current max defined by Scion). If the value is outside this range the setExperiment call on the client will fail. Required field",
                    "format": "int64",
                    "type": "string"
                },
                "ttlExpiryEventToLog": {
                    "description": "The event logged when an experiment times out after time_to_live_millis milliseconds. Max length = 32 chars",
                    "type": "string"
                },
                "variantId": {
                    "description": "A string which has numbers from 0-10. Required field.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExperimentalCampaignPayload": {
            "id": "ExperimentalCampaignPayload",
            "properties": {
                "campaignEndTimeMillis": {
                    "description": "FIAM configured end time of the experiment - we use long vs Timestamp here to minimize the size of the bundles sent back to the sdk clients. Note that for an experiment the end time is defined by whichever is earliest of (campaign end time, experiment time to live)",
                    "format": "int64",
                    "type": "string"
                },
                "campaignId": {
                    "description": "Campaign id",
                    "type": "string"
                },
                "campaignName": {
                    "description": "The display name for the campaign given by the campaign creator. we need it for generating fiam campaign analytic events on client SDK side",
                    "type": "string"
                },
                "campaignStartTimeMillis": {
                    "description": "FIAM configured start time of the experiment - we use long vs Timestamp here to minimize the size of the bundles sent back to the sdk clients",
                    "format": "int64",
                    "type": "string"
                },
                "experimentPayload": {
                    "$ref": "ExperimentPayload",
                    "description": "payload is sent for scion tracking of the experiment this is provied by ABT"
                }
            },
            "type": "object"
        },
        "FetchEligibleCampaignsRequest": {
            "id": "FetchEligibleCampaignsRequest",
            "properties": {
                "alreadySeenCampaigns": {
                    "description": "a list of campaigns that have already been rendered by the client so that service can filter them out while doing search of applicable messages",
                    "items": {
                        "$ref": "CampaignImpression"
                    },
                    "type": "array"
                },
                "clientSignals": {
                    "$ref": "ClientSignals",
                    "description": "[required] A common set of targeting signals - ex: user properties, lang"
                },
                "requestingClientApp": {
                    "$ref": "ClientAppInfo"
                }
            },
            "type": "object"
        },
        "FetchEligibleCampaignsResponse": {
            "id": "FetchEligibleCampaignsResponse",
            "properties": {
                "expirationEpochTimestampMillis": {
                    "description": "epoch time at which time clients must invalidates their cache",
                    "format": "int64",
                    "type": "string"
                },
                "messages": {
                    "description": "list of eligible messages sorted in high-to-low priority order",
                    "items": {
                        "$ref": "ThickContent"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ImageOnlyMessage": {
            "id": "ImageOnlyMessage",
            "properties": {
                "action": {
                    "$ref": "Action",
                    "description": "[optional] The Action to take when clicking anywhere on the image."
                },
                "imageUrl": {
                    "description": "The url of the image to be sent as the message.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Localization": {
            "description": "A tuple of text and the language it is in.",
            "id": "Localization",
            "properties": {
                "langCode": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ModalMessage": {
            "id": "ModalMessage",
            "properties": {
                "action": {
                    "$ref": "Action",
                    "description": "[optional] The Action to take when clicking on the button. Currently, the two must be set together: action.isSet() iff actionButton.isSet()"
                },
                "actionButton": {
                    "$ref": "Button",
                    "description": "[optional] Message button. Clicking this button will trigger the modal's action Currently, the two must be set together: action.isSet() iff actionButton.isSet()"
                },
                "backgroundHexColor": {
                    "description": "[optional] Message background color.",
                    "type": "string"
                },
                "body": {
                    "$ref": "Text",
                    "description": "[optional] Message body."
                },
                "imageUrl": {
                    "description": "[optional] Image to display (https url - it will be downloaded onto the device) No prefix required.",
                    "type": "string"
                },
                "title": {
                    "$ref": "Text",
                    "description": "[required] Message title."
                }
            },
            "type": "object"
        },
        "Priority": {
            "description": "Priority of the campaign. Used to select the most important messages amongst a set of eligible ones.",
            "id": "Priority",
            "properties": {
                "value": {
                    "description": "Priority value can range from 1-10, with 1 being the highest priority.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "Text": {
            "id": "Text",
            "properties": {
                "hexColor": {
                    "description": "Message font color.",
                    "type": "string"
                },
                "localizations": {
                    "items": {
                        "$ref": "Localization"
                    },
                    "type": "array"
                },
                "sourceLangCode": {
                    "type": "string"
                },
                "text": {
                    "description": "Message text.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ThickContent": {
            "description": "The 'thick' message that gets sent to clients",
            "id": "ThickContent",
            "properties": {
                "content": {
                    "$ref": "Content",
                    "description": "Content"
                },
                "dataBundle": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "[optional] user-defined data bundle. This data is meant for the developer to use in the SDK at runtime when a campaign is displayed. For more info: (go/fiam-data-bundles)",
                    "type": "object"
                },
                "experimentalPayload": {
                    "$ref": "ExperimentalCampaignPayload"
                },
                "isTestCampaign": {
                    "description": "if true, it's a campaign that's to be tested on client side. otherwise, it it's a regular message to be rendered.",
                    "type": "boolean"
                },
                "priority": {
                    "$ref": "Priority",
                    "description": "Priority of the campaign/message If two messages have the same priority, the one from the most-recently-started campaign will 'win'"
                },
                "triggeringConditions": {
                    "description": "condition to trigger the FIAM",
                    "items": {
                        "$ref": "TriggeringCondition"
                    },
                    "type": "array"
                },
                "vanillaPayload": {
                    "$ref": "VanillaCampaignPayload"
                }
            },
            "type": "object"
        },
        "TriggeringCondition": {
            "description": "Triggering condition for determing when the campaign will be shown to targeted users. Can be either a FiamTrigger, or a Scion Event",
            "id": "TriggeringCondition",
            "properties": {
                "event": {
                    "$ref": "Event"
                },
                "fiamTrigger": {
                    "enum": [
                        "UNKNOWN_TRIGGER",
                        "APP_LAUNCH",
                        "ON_FOREGROUND"
                    ],
                    "enumDescriptions": [
                        "",
                        "App is launched.",
                        "App has already launched and is brought into the foreground."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VanillaCampaignPayload": {
            "id": "VanillaCampaignPayload",
            "properties": {
                "campaignEndTimeMillis": {
                    "description": "[optional] end time of the campaign - we use long vs Timestamp here to minimize the size of the bundles sent back to the sdk clients",
                    "format": "int64",
                    "type": "string"
                },
                "campaignId": {
                    "description": "Campaign id",
                    "type": "string"
                },
                "campaignName": {
                    "description": "[optional] the display name for the campaign given by the campaign creator. we need it for generating fiam campaign analytic events on client SDK side",
                    "type": "string"
                },
                "campaignStartTimeMillis": {
                    "description": "Start time of the campaign - we use long vs Timestamp here to minimize the size of the bundles sent back to the sdk clients",
                    "format": "int64",
                    "type": "string"
                },
                "experimentalCampaignId": {
                    "description": "[optional] if the campaign is the result of a rolled out campaign, the old experimental campaign id here is used for impression tracking on the client",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Firebase In-App Messaging API",
    "version": "v1",
    "version_module": true
}